#include <iostream>
#include <limits>

using namespace std;

const int n = 400005;
int tree[n], arr[n];

void build(int node, int start, int end)
{
  if(start == end)
  {
    tree[node] = arr[start];
  }
  
  else
  {
    int mid = (start + end) / 2;
    build(2*node, start, mid);
    build(2*node+1, mid+1, end);
    tree[node] = min(tree[2*node], tree[2*node+1]);
  }
  return;
}


void update(int node, int start, int end, int idx, int val)
{
  if(start == end)
  {
    arr[idx] = val;
    tree[node] = val;
  }
  
  else
  {
    int mid = (start + end)/2;
    if(start <= idx && idx <= mid)
    {
      update(2*node, start, mid, idx, val);
    }
  
    else
    {
      update(2*node+1, mid+1, end, idx, val);
    }
    tree[node] = min(tree[2*node], tree[2*node+1]);
  }
  return;
}


int query(int node, int start, int end, int l, int r)
{
  if(r < start || l > end)
  {
    return numeric_limits<int>::max();
  }
  
  if(l <= start && end <= r)
  {
    return tree[node];
  }
  
  int mid = (start + end)/2;
  int p1 = query(2*node, start, mid, l, r);
  int p2 = query(2*node+1, mid+1, end, l, r);
  return min(p1, p2);
}


int min(int a, int b)
{
  if(a < b)
  {
    return a;
  }
  return b;
}

int main() 
{
  int N, Q, l, r;
  char q;
  cin >> N >> Q;
  for(int i=1; i <= N; i++){cin>>l; arr[i]=l;}
  build(1, 1, N);
  for(int i=0; i < Q; i++)
  {
    cin>>q>>l>>r;
    if(q =='q')
    {
      cout << query(1, 1, N, l, r)<<endl;
    }
    else
    {
      update(1, 1, N, l, r);
    }
  }
  
  return 0;
}
